#!/usr/bin/env python3

from Crypto.Util.number import *
from sage.all import *


r = Integer(0)
a = Integer(1)

with open("leak_d.txt") as f:
    lines = f.readlines()

    for i in range(len(lines)):
        if "8" in lines[i]:
            if "9" in lines[i + 1]:
                r += a
            a <<= 1


# print(r)

C = Integer(
    22308052042853378106803772363205788323264754054648569956245328711963416514977694226290896730874582159520009789334589860323414447480644022788719211001184326837127051861459719420238397210570507020289046397786777495104073979392679227661156523430614458164468599244246915778289909964986663703854360770042419706416603116561254301628896803438190268187860879623647321188038601296627766927988519194848942579220880587871365598486501269926071268618495347882593326382880736169512674524087060494412808044830937559213077269508180559812716847829027747259128910098757429109426868360110744121218625487339494945382048700977021406061589
)

e = Integer(65537)

# d = r
d = Integer(
    2698272460392358483971187683960649403350180511473769520986308355107225737258253863729426067934785106695903149795033154934159372096410536890131389372613609981582605465202928771085840365365221722411968771221276125082271729119562762397664747228905966870905501049925184477878932202741634790749168217558025492810215035504943888706999781810831682793404339215945080182044896505333558885469364028067310380099205733759467785946368900027281970760206304945507071962050769274120620768618867053565547638723012577923779944592608907703773317531535423071422272700542056429773537694324686983958148998458137929448484513064013887264673
)

ed = Integer(
    8172334060150873476205380207658154147140729408205414951335779893126897100461834390065656943213327577301993371298274132622716959823786797670750294748814004279010478210165142317658638898204649036109615976484698433497904095699956113286537294845366916504627455257198011369753511344337087351697076873214245031570001577304285672480574802706072688792693170250644850913881914712331927470227569602911595307093752877942760742826189368365581595981018044054788958083589296387333780549306134843507474273611598886817223583525166246249841679744023231726664702046427932939151309197774046905377386071619014417807926752280298675565558
)
de = Integer(
    6225667002705466561780878479217075063598456261248773245949928514968054650001420396824971229781964868651916723074067912810870973018389858859501260758221862890852765329969148825329799036959342794226166673859990121240252423242848075757290270926266729927249388608652852261305038584967741080606387490950997380322109043763301236526364209872852320623788693372806297681729547969231834311995737041825147636484887081295863829655600382285914563047998205042349851235614857462326405814288782251942893331922075941947829543977819990046109194857155635865426732502318097809556886261366439077061819013779866748317608740803892631581323
)


# ed = powmod(e, d, n) = e ** d - k_1 * n
# de = powmod(d, e, n) = d ** e - k_2 * n

# k1 * n = e ** d - ed, but too large
# k2 * n = d ** e - de, but too large

# print("Finding k2n...")
de = pow(d, e) - de
# print("Find k2n.")
# print(k2n)

# print("Finding ede...")
ede = pow(ed, e) - e
# print("Find ede.")

# Take gcd on (e ** d - ed) and (d ** e - de) to obtain n
n = gcd(ede, de)
print(n)


flag = long_to_bytes(pow(C, d, n))
print(flag)
# AIS3{5IDe_ChaNNeL_I$_e4$y_wH3n_tHE_DAT4_le4K49E_IS_EXac7}
