#!/usr/bin/env python

# Reference: https://blog.cryptohack.org/cryptoctf2021-hard

from sage.all import *
from Crypto.Util.number import *

from secret import p, q, flag
from output import a, b, C

assert isPrime(p) and isPrime(q)  # 512 bits, 512 bits
n = p * q  # 1024 bits
phi_n = (p - 1) * (q - 1)

# a %= n
# b %= n

E = EllipticCurve(Zmod(n), [a, b])
G = E(p, p) + E(q, q)

print(type(E))
print(E.category())

C = E(C[0], C[1])
# C = bytes_to_long(flag) * G

print(f"{phi_n = }")
print(f"{n = }")
print(f"{p = }")
print(f"{q = }")
print(f"{a = }")
print(f"{b = }")
print(f"G = {G.xy()}")
print(f"C =", C.xy())

Ep = EllipticCurve(Zmod(p), [ZZ(a % p), ZZ(b % p)])
Eq = EllipticCurve(Zmod(q), [ZZ(a % q), ZZ(b % q)])

kp = Ep.order()
kq = Eq.order()

factor_p = prime_factors(kp)
factor_q = prime_factors(kq)

print(f"{kp = }")
print(f"{kq = }")

print(f"{factor_p = }")
print(f"{factor_q = }")

Gp = Ep(G[0], G[1])
Gq = Eq(G[0], G[1])

Cp = Ep(C[0], C[1])
Cq = Eq(C[0], C[1])

kGp = Gp.order()
kGq = Gq.order()

factor_kGp = prime_factors(kGp)
factor_kGq = prime_factors(kGq)

print(f"{kGp = }")
print(f"{kGq = }")

print(f"{factor_kGp = }")
print(f"{factor_kGq = }")

rs = []
ms = []

for f in factor_kGp:
    t = kGp // f
    print("Solving DLOG...")
    dlog = discrete_log(t * Cp, t * Gp, operation="+")
    print("Solved DLOG! {}/{}".format(dlog, f))
    rs += [dlog]
    ms += [f]

sp = CRT_list(rs, ms)

print(f"{rs = }")
print(f"{ms = }")
print(f"{sp = }")

rs = []
ms = []

for f in factor_kGq:
    t = kGq // f
    print("Solving DLOG...")
    dlog = discrete_log(t * Cq, t * Gq, operation="+")
    print("Solved DLOG! {}/{}".format(dlog, f))
    rs += [dlog]
    ms += [f]

sq = CRT_list(rs, ms)

print(f"{rs = }")
print(f"{ms = }")
print(f"{sq = }")

rs = [sp, sq]
ms = [kGp, kGq]

flag = long_to_bytes(CRT_list(rs, ms))
print(flag)


# a = (p + 1) * (q + 1) - (p + q) ** 2 - 1
# b = p * q * (p + q - 1)

# Solve p, q
# p, q = var("p, q")
# ans = solve([(p + 1) * (q + 1) - (p + q) ** 2 - 1 == a, p * q * (p + q - 1) == b], p, q)

# print(ans)

# ans = [
#     [
#         1291570437571548108602677722191376815944720207670689841965090388326940686642654446945208820370796863647650727896954926930018377575753937822622270407516491,
#         -1632612641432289359777032229474739824502070018852182367919181992543886926746743642598380442660715643590514605193264497966141970510558181067769726348913093,
#     ],
#     [
#         1291570437571548108602677722191376815944720207670689841965090388326940686642654446945208820370796863647650727896954926930018377575753937822622270407516491,
#         341042203860741251174354507283363008557349811181492525954091604216946240104089195653171622289918779942863877296309571036123592934804243245147455941396603,
#     ],
#     [
#         341042203860741251174354507283363008557349811181492525954091604216946240104089195653171622289918779942863877296309571036123592934804243245147455941396603,
#         -1632612641432289359777032229474739824502070018852182367919181992543886926746743642598380442660715643590514605193264497966141970510558181067769726348913093,
#     ],
#     [
#         341042203860741251174354507283363008557349811181492525954091604216946240104089195653171622289918779942863877296309571036123592934804243245147455941396603,
#         1291570437571548108602677722191376815944720207670689841965090388326940686642654446945208820370796863647650727896954926930018377575753937822622270407516491,
#     ],
#     [
#         -1632612641432289359777032229474739824502070018852182367919181992543886926746743642598380442660715643590514605193264497966141970510558181067769726348913093,
#         341042203860741251174354507283363008557349811181492525954091604216946240104089195653171622289918779942863877296309571036123592934804243245147455941396603,
#     ],
#     [
#         -1632612641432289359777032229474739824502070018852182367919181992543886926746743642598380442660715643590514605193264497966141970510558181067769726348913093,
#         1291570437571548108602677722191376815944720207670689841965090388326940686642654446945208820370796863647650727896954926930018377575753937822622270407516491,
#     ],
# ]


# for p, q in ans:
#     if p < 0 or q < 0:
#         continue
#     if isPrime(p) and isPrime(q):
#         print(p, q)
